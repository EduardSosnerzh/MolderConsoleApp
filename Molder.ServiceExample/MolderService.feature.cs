// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Molder.ServiceExample
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "WebService")]
    public partial class ServiceFeature : object, Xunit.IClassFixture<ServiceFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "WebService"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "MolderService.feature"
#line hidden
        
        public ServiceFeature(ServiceFeature.FixtureData fixtureData, Molder_ServiceExample_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Service", null, ProgrammingLanguage.CSharp, new string[] {
                        "WebService"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="GET 1")]
        [Xunit.TraitAttribute("FeatureTitle", "Service")]
        [Xunit.TraitAttribute("Description", "GET 1")]
        public virtual void GET1()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GET 1", null, tagsOfScenario, argumentsOfScenario);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("я создаю json документ \"output\":", @"{
	""data"": {
		""id"": 2,
		""email"": ""janet.weaver@reqres.in"",
		""first_name"": ""Janet"",
		""last_name"": ""Weaver"",
		""avatar"": ""https://reqres.in/img/faces/2-image.jpg""
	},
	""support"": {
		""url"": ""https://reqres.in/#support-heading"",
		""text"": ""To keep ReqRes free, contributions towards server costs are appreciated!""
	}
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value",
                            "Style"});
                table1.AddRow(new string[] {
                            "Content-Type",
                            "application/json",
                            "HEADER"});
#line 21
 testRunner.When("я вызываю веб-сервис \"Get\" по адресу \"https://reqres.in/api/users/2\" с методом \"G" +
                        "et\", используя параметры:", ((string)(null)), table1, "When ");
#line hidden
#line 24
 testRunner.Then("веб-сервис \"Get\" выполнился со статусом \"200\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
  testRunner.And("я сохраняю результат вызова веб-сервиса \"Get\" как json в переменную \"result\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
  testRunner.And("write variable \"result.//data.id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
  testRunner.And("я убеждаюсь, что значение переменной \"result.//\" равно \"{{output.//}}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="GET 2")]
        [Xunit.TraitAttribute("FeatureTitle", "Service")]
        [Xunit.TraitAttribute("Description", "GET 2")]
        public virtual void GET2()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GET 2", null, tagsOfScenario, argumentsOfScenario);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 30
 testRunner.Given("я создаю json документ \"output\":", "{\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value",
                            "Style"});
                table2.AddRow(new string[] {
                            "Content-Type",
                            "application/json",
                            "HEADER"});
#line 35
 testRunner.When("я вызываю веб-сервис \"Get\" по адресу \"https://reqres.in/api/users/23\" с методом \"" +
                        "Get\", используя параметры:", ((string)(null)), table2, "When ");
#line hidden
#line 38
 testRunner.Then("веб-сервис \"Get\" выполнился со статусом \"404\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
  testRunner.And("я сохраняю результат вызова веб-сервиса \"Get\" как json в переменную \"result\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
  testRunner.And("я убеждаюсь, что значение переменной \"result.//\" равно \"{{output.//}}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="POST")]
        [Xunit.TraitAttribute("FeatureTitle", "Service")]
        [Xunit.TraitAttribute("Description", "POST")]
        public virtual void POST()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("POST", null, tagsOfScenario, argumentsOfScenario);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 44
 testRunner.Given("я сохраняю текст в переменную \"input\":", "{\r\n\t\"name\": \"morpheus\",\r\n\t\"job\": \"leader\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value",
                            "Style"});
                table3.AddRow(new string[] {
                            "Content-Type",
                            "application/json",
                            "HEADER"});
                table3.AddRow(new string[] {
                            "Body",
                            "input",
                            "BODY"});
#line 51
 testRunner.When("я вызываю веб-сервис \"Post\" по адресу \"https://reqres.in/api/users\" с методом \"Po" +
                        "st\", используя параметры:", ((string)(null)), table3, "When ");
#line hidden
#line 55
 testRunner.Then("веб-сервис \"Post\" выполнился со статусом \"Created\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
  testRunner.And("я сохраняю результат вызова веб-сервиса \"Post\" как json в переменную \"result\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
  testRunner.And("write variable \"result\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="POST with Generator")]
        [Xunit.TraitAttribute("FeatureTitle", "Service")]
        [Xunit.TraitAttribute("Description", "POST with Generator")]
        public virtual void POSTWithGenerator()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("POST with Generator", null, tagsOfScenario, argumentsOfScenario);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 60
 testRunner.Given("я сохраняю случайный набор букв и цифр длиной 10 знаков в переменную \"tmp1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 61
 testRunner.And("я сохраняю случайный набор букв и цифр длиной 8 знаков в переменную \"tmp2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
  testRunner.Given("я сохраняю текст в переменную \"input\":", "{\r\n\t\"name\": \"{{tmp1}}\",\r\n\t\"job\": \"{{tmp2}}\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value",
                            "Style"});
                table4.AddRow(new string[] {
                            "Content-Type",
                            "application/json",
                            "HEADER"});
                table4.AddRow(new string[] {
                            "Body",
                            "input",
                            "BODY"});
#line 69
 testRunner.When("я вызываю веб-сервис \"Post\" по адресу \"https://reqres.in/api/users\" с методом \"Po" +
                        "st\", используя параметры:", ((string)(null)), table4, "When ");
#line hidden
#line 73
 testRunner.Then("веб-сервис \"Post\" выполнился со статусом \"Created\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 74
  testRunner.And("я сохраняю результат вызова веб-сервиса \"Post\" как json в переменную \"result\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
  testRunner.And("я убеждаюсь, что значение переменной \"result.//name\" равно \"{{tmp1}}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
  testRunner.And("я убеждаюсь, что значение переменной \"result.//job\" равно \"{{tmp2}}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
  testRunner.And("write variable \"result.//\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="POST with appsetings")]
        [Xunit.TraitAttribute("FeatureTitle", "Service")]
        [Xunit.TraitAttribute("Description", "POST with appsetings")]
        [Xunit.TraitAttribute("Category", "Values")]
        public virtual void POSTWithAppsetings()
        {
            string[] tagsOfScenario = new string[] {
                    "Values"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("POST with appsetings", null, tagsOfScenario, argumentsOfScenario);
#line 80
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 81
 testRunner.Given("я сохраняю текст в переменную \"input\":", "{\r\n\t\"name\": \"{{Value1}}\",\r\n\t\"job\": \"{{Value2}}\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value",
                            "Style"});
                table5.AddRow(new string[] {
                            "Content-Type",
                            "application/json",
                            "HEADER"});
                table5.AddRow(new string[] {
                            "Body",
                            "input",
                            "BODY"});
#line 88
 testRunner.When("я вызываю веб-сервис \"Post\" по адресу \"https://reqres.in/api/users\" с методом \"Po" +
                        "st\", используя параметры:", ((string)(null)), table5, "When ");
#line hidden
#line 92
 testRunner.Then("веб-сервис \"Post\" выполнился со статусом \"Created\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 93
  testRunner.And("я сохраняю результат вызова веб-сервиса \"Post\" как json в переменную \"result\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 94
  testRunner.And("я убеждаюсь, что значение переменной \"result.//name\" равно \"{{Value1}}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
  testRunner.And("я убеждаюсь, что значение переменной \"result.//job\" равно \"{{Value2}}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
  testRunner.And("write variable \"result.//\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="PUT")]
        [Xunit.TraitAttribute("FeatureTitle", "Service")]
        [Xunit.TraitAttribute("Description", "PUT")]
        public virtual void PUT()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PUT", null, tagsOfScenario, argumentsOfScenario);
#line 98
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 99
 testRunner.Given("я сохраняю текст в переменную \"input\":", "{\r\n\t\"name\": \"morpheus\",\r\n\t\"job\": \"zion resident\"\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value",
                            "Style"});
                table6.AddRow(new string[] {
                            "Content-Type",
                            "application/json",
                            "HEADER"});
                table6.AddRow(new string[] {
                            "Body",
                            "input",
                            "BODY"});
#line 106
 testRunner.When("я вызываю веб-сервис \"Put\" по адресу \"https://reqres.in/api/users/2\" с методом \"P" +
                        "ut\", используя параметры:", ((string)(null)), table6, "When ");
#line hidden
#line 110
 testRunner.Then("веб-сервис \"Put\" выполнился со статусом \"200\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 111
  testRunner.And("я сохраняю результат вызова веб-сервиса \"Put\" как json в переменную \"result\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
  testRunner.And("я убеждаюсь, что значение переменной \"result.//name\" равно \"morpheus\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
  testRunner.And("я убеждаюсь, что значение переменной \"result.//job\" равно \"zion resident\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
  testRunner.And("write variable \"result.//\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="DELETE")]
        [Xunit.TraitAttribute("FeatureTitle", "Service")]
        [Xunit.TraitAttribute("Description", "DELETE")]
        public virtual void DELETE()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DELETE", null, tagsOfScenario, argumentsOfScenario);
#line 116
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Value",
                            "Style"});
                table7.AddRow(new string[] {
                            "Content-Type",
                            "application/json",
                            "HEADER"});
#line 117
 testRunner.When("я вызываю веб-сервис \"Delete\" по адресу \"https://reqres.in/api/users/2\" с методом" +
                        " \"Delete\", используя параметры:", ((string)(null)), table7, "When ");
#line hidden
#line 120
 testRunner.Then("веб-сервис \"Delete\" выполнился со статусом \"204\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ServiceFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ServiceFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
